generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "clientExtensions"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  refresh_token_expires_in Int?
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  createdAt                DateTime @default(now()) @map(name: "created_at")
  updatedAt                DateTime @default(now()) @map(name: "updated_at")
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id                             String              @id @default(cuid())
  name                           String?
  email                          String?             @unique
  emailVerified                  DateTime?
  image                          String?
  createdAt                      DateTime            @default(now()) @map(name: "created_at")
  updatedAt                      DateTime            @default(now()) @map(name: "updated_at")
  accounts                       Account[]
  sessions                       Session[]
  projects                       ProjectUsers[]
  bountySubmissions              BountySubmission[]
  comments                       Comment[]
  bounties                       Bounty[]
  notifications                  UserNotifications[]
  stripeCustomerId               String?             @unique @map(name: "stripe_customer_id")
  stripeCustomerProductId        String?             @unique @map(name: "stripe_customer_product_id")
  stripeCustomerDonationPriceId  String?             @unique @map(name: "stripe_customer_donation_price_id")
  blood                          Int                 @default(0) // Blood is earned after a bounty submission is resolved
  gold                           Float               @default(0.00) // Gold is earned proportional to the price of the bounty solved. 1$ = 1 gold. Remainder is silver. Both solvers and posters earn gold. 
  notificationNewSubmission      Boolean             @default(true)
  notificationSubmissionAccepted Boolean             @default(true)
  notificationMarketing          Boolean             @default(true)

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Project {
  id              String            @id @default(cuid())
  name            String
  description     String?
  logo            String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  image           String?
  githubRepo      GithubRepository?
  bounties        Bounty[]
  users           ProjectUsers[]
  invites         ProjectInvite[]
  stripeProductId String?           @unique @map(name: "stripe_product_id")
  notifications   Notification[]
  deleted         Boolean           @default(false)
  tags            Tag[]
}

model Tag {
  id             String    @id @default(cuid())
  slug           String    @unique
  tagDescription String?
  tagProjectUrl  String?
  tagMetadata    Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  projects       Project[]
}

model ProjectInvite {
  email     String
  expires   DateTime
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime @default(now())

  @@unique([email, projectId])
  @@index([projectId])
}

model ProjectUsers {
  id           String             @id @default(cuid())
  role         ProjectUserRoles   @default(MEMBER)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  project      Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String
  bountiesSeen BountySubmission[]

  @@unique([userId, projectId])
  @@index([projectId])
}

enum ProjectUserRoles {
  OWNER
  ADMIN
  MEMBER
}

model GithubRepository {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  projectId    String   @unique
  githubRepoId Int
  name         String
  url          String
  owner        String

  @@unique([projectId, githubRepoId])
}

model Bounty {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  resolvedAt        DateTime?
  title             String
  description       String?            @db.LongText
  content           Json?
  html              String?            @db.LongText
  issueLink         String?
  bountyPrice       Float?
  bountyRange       Boolean            @default(false)
  bountyPriceMin    Float?
  bountyPriceMax    Float?
  deadline          DateTime?
  published         Boolean            @default(false)
  resolved          Boolean            @default(false)
  deleted           Boolean            @default(false)
  project           Project            @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  projectId         String
  bountySubmissions BountySubmission[]
  upvotes           Int                @default(0)
  downvotes         Int                @default(0)
  comments          Comment[]
  githubIssue       Json?
  stripePriceId     String?            @map(name: "stripe_price_id")
  submittedBy       User?              @relation(fields: [userId], references: [id], onUpdate: NoAction)
  userId            String?
  notifications     Notification[]
  type              BountyType         @default(BUG)

  @@index([projectId])
  @@index([userId])
  @@fulltext([title])
  @@fulltext([title, description])
  @@fulltext([description])
}

enum BountyType {
  BUG
  PROJECT
  FEATURE
  IMPROVEMENT
  DESIGN
  DOCS
  SUPPORT
  OTHER
}

enum BountyExperienceLevel {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

model BountySubmission {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  bounty        Bounty         @relation(fields: [bountyId], references: [id], onUpdate: NoAction)
  acceptedAt    DateTime?
  bountyId      String
  solutionLink  String?
  comments      String?
  user          User           @relation(fields: [userId], references: [id], onUpdate: NoAction)
  userId        String
  accepted      Boolean        @default(false)
  hidden        Boolean        @default(false)
  deleted       Boolean        @default(false)
  seenBy        ProjectUsers[]
  notifications Notification[]

  @@index([bountyId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  bounty    Bounty   @relation(fields: [bountyId], references: [id], onUpdate: NoAction)
  bountyId  String
  comment   String   @db.LongText
  upvotes   Int      @default(0)
  downvotes Int      @default(0)
  deleted   Boolean  @default(false)
  hidden    Boolean  @default(false)

  @@index([bountyId])
}

model Notification {
  id                 String              @id @default(cuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  type               NOTIFICATIONTYPE
  bounty             Bounty?             @relation(fields: [bountyId], references: [id], onUpdate: NoAction)
  bountyId           String?
  bountySubmissionId String?
  bountySubmission   BountySubmission?   @relation(fields: [bountySubmissionId], references: [id])
  project            Project?            @relation(fields: [projectId], references: [id], onUpdate: NoAction)
  projectId          String?
  message            String              @db.LongText
  title              String
  data               Json?
  users              UserNotifications[]

  @@index([bountyId])
  @@index([projectId])
  @@index([bountySubmissionId])
}

enum NOTIFICATIONTYPE {
  SUBMISSIONRECIEVED
  SUBMISSIONACCEPTED
  DONATIONRECIEVED
}

model UserNotifications {
  readAt         DateTime?
  read           Boolean      @default(false)
  user           User         @relation(fields: [userId], references: [id], onUpdate: NoAction)
  userId         String // relation scalar field (used in the `@relation` attribute above)
  notification   Notification @relation(fields: [notificationId], references: [id], onUpdate: NoAction)
  notificationId String // relation scalar field (used in the `@relation` attribute above)

  @@id([userId, notificationId])
  @@index([notificationId])
  @@index([userId])
}
